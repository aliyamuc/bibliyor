Title: Robust Procedural Learning for Anomaly Detection and Observability in 5G RAN
Abstract:
The paper presents a new trace guideline for the 5G Radio Access Network (RAN) that enables a component- and procedure-based split of system logs. This approach allows models to learn the system's behavior more accurately and improves anomaly detection and observability. The evaluation results show that a fast, dictionary-based algorithm can detect all anomalies and keep false positives close to zero, outperforming previously state-of-the-art methods. Troubleshooters can also identify anomalies more quickly and gain insights into component interaction in RAN.
I. Introduction:
The introduction highlights the importance of machine learning (ML) in understanding the behavior of large distributed systems like 5G RAN. However, system logs are often unstructured and lack the context needed to track procedures and learn the system's behavior, making it difficult for ML to learn complex behaviors. The data quality in system logs is often poor, and there is no consensus on instrumenting the software from an ML perspective. The paper proposes a procedure-based software instrumentation guideline that enables novel methods to learn RAN behavior from system log events, enhancing observability and identifying anomalies more accurately than current state-of-the-art methods. The main contributions of the work are:

Defining trace guidelines based on a system's functional description
Explaining and visualizing how observability improves when instrumenting the system with the new guidelines
Introducing a procedure-based anomaly detection method that can take advantage of the extra context provided by the new guidelines
Evaluating anomaly detection and observability improvement when updating an advanced 5G testbed with the new trace guidelines

II. Related Work:
A. Trace Guidelines: The paper defines trace guidelines that enable enhanced observability and add valuable context for machine learning methods. Mining system logs to extract useful information and dependencies between events is an extensive research field, but the paper focuses on defining guidelines that can reduce noise and improve ML performance.
B. Anomaly Detection in System Logs: The proposed methods utilize the added procedure information in system logs to automatically group similar behavior and detect deviations more quickly and accurately than previous methods. The work is limited to identifying anomalies from a supervised approach where the training data is labeled as normal, which suits continuous integration environments.
C. Observability: The paper explores how observability can be enhanced using the information in system logs, and a special observability-score is defined to measure how fast troubleshooters understand ongoing procedures and identify anomalies. Previous research has attempted to improve observability through various methods, such as mining system logs, enhancing protocols, and implementing distributed tracing, but many 5G RAN protocols cannot be extended to include the extra information proposed by these approaches.
III. Background:
A. Terminology: The section defines key terms used in the work, such as component (a part of a system), procedure (a task handled by the system), sub-procedure (the work performed by a single component), system log (the log containing valuable debug information), and event (important information stored by the software instrumentation).
B. Problem Definition: The paper describes the challenges in identifying log anomalies in large distributed systems. Fault identification is usually fast in small systems where developers are experts on the whole system, but it can be much more troublesome in large distributed systems where troubleshooters only know small parts of the system. Each developer decides on the debug information to store, and the instrumentation can differ significantly between components. Tracking procedures that affect several components requires expertise on all parts or consulting other experts to correctly interpret events. The variation in instrumentation is troublesome for the machine learning society, and developers tend to change the instrumentation during development, affecting ML models that learn from system logs. Another problem is the lack of context in system logs that allows linking between events and a specific procedure, reducing observability and increasing noise for ML algorithms.
IV. System Design:
A. Trace Guidelines: The paper defines a new trace guideline that adds procedural information to existing debug information and highlights the importance of structured logs. The guidelines propose various levels of maturity for system debugability, with level 5 enabling procedure tracking and understanding how parts work together to fulfill procedures. The guidelines suggest separating information into an identifying section (locating the affected part of the system) and a parameter section (providing an informative message or key parameters). Adding a procedure context allows ML methods to automatically identify different procedures and train models for each procedure.
B. Anomaly Detection: The procedural information is utilized by a new procedural-based method to improve the speed and accuracy of anomaly detection. The method creates two dictionaries: a sequence-dictionary to detect anomalies within sub-procedures and a procedure-dictionary to handle anomalies due to new, missing, or extra sub-procedures. The method learns the occurrences of events within sub-procedures and which sub-procedures occur for a procedure.
C. Observability: The paper describes how observability can be enhanced using the new procedural-based methods to visualize system behavior and highlight anomalies. The visualization is made from a top-down perspective where procedures affect components in the system, allowing troubleshooters to see where anomalies occur in the procedures and navigate deeper to understand component interactions.
D. Evaluation Metrics: The section defines the evaluation metrics, including the observability-score, which measures how fast troubleshooters understand ongoing procedures and identify anomalies. The observability-score is based on five questions related to the failing procedure, historical procedures, failing microservice, normal event, and anomaly type. The time needed to answer these questions is used to calculate the score, ranging from zero to ten points.
V. Evaluation:
A. Testbed Setup and Data Acquisition: The paper updates the existing software instrumentation of an advanced 5G testbed to follow the procedure-based guidelines. The debug-ability of the testbed is increased from level 4 to 5 by updating 199 software instrumentations, which took 40 hours. A highly intensive traffic test case is run to acquire system logs with the updated instrumentation, containing an average of 863,153 events from 5,750 unique UEs, with 150 events per UE.
B. Experimental Setup: The section describes the experimental setup for evaluating the proposed methods. The hardware specifications of the 5G testbed are not revealed due to trade secrets, but LTTng version 2.12 is used to instrument the system. All methods use Ubuntu 18.04.5 OS with one Intel(R) Xeon(R) CPU @ 2.20GHz processor and 13GB of memory for training and detecting anomalies. A 5-folded cross-validation ensures the stability of the results.
C. Anomaly Detection: The evaluation results show that the procedure-based method can detect all anomalies and keep false positives close to zero, outperforming previous state-of-the-art methods. The procedure-based method reaches its maximum F1-score at 5% data usage, while the baseline methods continue to improve up to 70% data usage. The training time of the procedure-based method is also significantly lower than the deep learning approaches.
D. Observability: The results demonstrate that troubleshooters can better understand the system's behavior and identify anomalies faster using the procedure-based method. All troubleshooters improved their observability-score using the procedure-based method, with the ability to visualize and compare procedures greatly increasing the system's understanding. The procedure-based method helps provide a fast understanding of the system, with the first three observability questions being answered within three minutes.
VI. Discussion and Limitations:
The paper discusses the applicability of the proposed methods to other complex systems, as the simulated anomalies represent abnormal sequences of events in the system log and are not telecom-specific. The authors believe that the procedure-based method can improve anomaly detection and observability in many other complex systems. The study's limitations include the need for more troubleshooters to gain greater statistical certainty in the observability-score and the fact that the proposed trace guidelines may be difficult to implement in systems where the procedure cannot be determined for some events.
VII. Conclusion and Future Work:
The paper concludes that the procedure-based trace guideline can improve ML-based anomaly detection and observability in an advanced distributed 5G testbed. The extra procedure context enables the procedural-based method to learn the behavior of smaller pieces of the system and combine them to understand how all pieces work together, detecting all anomalies and keeping false positives close to zero. The procedural information also enhances the system's observability, allowing troubleshooters to better understand the behavior and identify anomalies faster. Future research will investigate whether these guidelines can also aid in detecting the root cause of anomalies in large distributed systems.