Microservices-based Databank for Turkish Hazelnut Cultivars Using IoT and Semantic Web Technologies
Sahin Aydin, Dieaa Aldara
Department of Information Technologies, Işık University, Istanbul, Turkey

Summary
Information and communication technologies (ICTs) can play a crucial role in facilitating access to comprehensive information on the quality standards of Turkish hazelnut cultivars. In this regard, this study introduces a Hazelnut Databank System (HDS) that utilizes the microservices architecture, an integrated software system supported by the Internet of Things (IoT) and semantic web, to categorize Turkish hazelnut cultivars. The study focuses on developing microservices using various programming languages and frameworks. Specifically, C# on the .NET Core Framework was used for both microservices and the web-based application implemented through the ASP.NET Core MVC Framework. Mobile-based software applications were created using Xamarin.Forms, and the IoT application was developed using the Python programming language. The data storage is facilitated through the MS SQL Server database. Additionally, the study incorporates the implementation of a hazelnut species classification system using the DNN+ResNet50 machine learning model, achieving an impressive accuracy rate of 95.77%. The overall usability of the system was evaluated, resulting in a score of 42 out of 50. By providing detailed information on Turkish hazelnut cultivars, the HDS has the potential to greatly improve hazelnut production quality in Turkey and increase awareness of hazelnut agriculture among relevant stakeholders.

Introduction
Turkey’s dominance in the international hazelnut market can mainly be ascribed to its ecological elements, encompassing temperature, rainfall, and soil properties, that establish propitious circumstances for the growth of this significant nut. The nation’s preeminent standing in hazelnut manufacture is evident in the 765 thousand tons of hazelnuts yielded in 2022. The raising and commerce of hazelnuts have a direct and indirect influence on a large number of individuals in Turkey, particularly in the Black Sea Region, where the hazelnut sector assumes a crucial function in the socioeconomic advancement of nearby societies. The export earnings of about $1.80 billion produced from hazelnuts in 2022 emphasize the importance of this product to Turkey’s economy. The categorization of Turkish hazelnuts into 18 standard classifications, which are further divided into rounded, pointed, and almond-shaped types, serves as a testament to the diverse range of this agricultural commodity. This encompassing variety includes the Tombul, Palaz, Çakıldak, Foşa, Kalınkara, Kargalak, Uzunmusa, Mincane, Cavcava, Kan, Kara, Okay 28, Giresun Melezi, and Allahverdi varieties within the rounded category, the Sivri and İncekara varieties within the pointed category, and the Yuvarlak Badem and Yassı Badem varieties within the almond category. Furthermore, Turkey also produces other hazelnut varieties such as Acı, Kuş, and Bolu.

Given the socio-economic significance of hazelnut production, particularly in the Black Sea Region, it becomes imperative to elevate the quality of this commodity to optimize income generation. While certain hazelnut producers are well-versed in the nuances of quality variations within their products, there is a critical need to disseminate this knowledge to all stakeholders involved in the production and consumption of high-quality hazelnuts. This necessitates the establishment of heightened awareness through the implementation of an integrated information system. This system, built upon contemporary software architecture and leveraging various technologies, can effectively bridge the gap in understanding and appreciation of superior-quality hazelnuts.

In pursuit of these objectives, our study introduces the Hazelnut Databank System (HDS), an integrated databank system that leverages a modern microservice architecture widely employed in the software industry. HDS incorporates a sophisticated deep-learning model based on DNN+ResNet50 to classify the 18 Turkish hazelnut varieties. These include Acı, Cavcava, Çakıldak, Foşa, İncekara, Kalınkara, Kara, Kargalak, Kuş, Mincane, Okay 28, Palaz, Sivri, Tombul, Bolu (Türk), Uzunmusa, Yassı Badem, and Yuvarlak Badem, based on their distinctive features. Moreover, the system is designed with versatile software applications compatible with web, desktop, and mobile platforms. It harnesses the power of the Internet of Things (IoT) and semantic web technologies. This comprehensive approach positions the HDS to significantly impact the perceptions of hazelnut consumers and producers regarding the quality of this agriculturally vital product.

Implementation of Databank System
Turkish Hazelnut Cultivars
The primary objective of this study was to create a microservices-based databank utilizing semantic web and IoT technologies, offering comprehensive information on 18 distinct Turkish hazelnut cultivars, including Acı, Cavcava, Çakıldak, Foşa, İncekara, Kalınkara, Kara, Kargalak, Kuş, Mincane, Okay 28, Palaz, Sivri, Tombul, Bolu (Türk), Uzunmusa, Yassı Badem, and Yuvarlak Badem. Although Turkey officially recognizes 18 standard hazelnut cultivars, some cultivars such as Acı, Kuş, and Bolu, not among the standard ones, were included in this study. Notably, certain standard Turkish hazelnut cultivars, including Kan, Giresun Melezi, and Allahverdi, were not included due to the unavailability of samples. While this section provides only a glimpse of the characteristics of the included hazelnut cultivars, the developed software applications within the databank offer more detailed information.

The Acı hazelnut cultivar, although not recognized as a standard Turkish hazelnut cultivar, is predominantly produced in the Ordu and Samsun provinces. The fruit of this hazelnut variety, characterized by low yield and quality, exhibits bitterness when wet. The shell is indented, pointed, larger than the Sivri hazelnut, flat and wider, with a light brown color and an average thickness of 1 mm. The shell fruit measures an average of 18.68 mm in length and 16.63 mm in width. The kernel ratio is 50%–52%, and the fat content ranges from 63% to 65%.

The Cavcava hazelnut cultivar, also known as Kocakarı Fındığı, is produced in limited quantities in the Trabzon and Samsun provinces. The cultivation area for Cavcava hazelnuts is quite scarce. The shell of this cultivar is brown with an average thickness of 0.9–1 mm, exhibiting a table protrusion. The shell fruit measures 18.46 mm in length and 17.33 mm in width. It boasts a kernel ratio of 52%–54%, and its fat content ranges from 63% to 66%.

The Çakıldak hazelnut cultivar, also known as Delisava, Gök, or Göv (Göğ), is extensively cultivated in the Ordu province. This variety, distinguished by its late leaf bud bursts compared to other Turkish hazelnut cultivars, is less susceptible to late spring frosts. Its adaptability to various climates and soil conditions contributes to a remarkably high yield. The fruit of the Çakıldak hazelnut cultivar is notably large, with a light brown skin measuring 1.2 mm in thickness. The top part is wide, flat, and slightly curved outward, with the shell fruit averaging 18.41 mm in length and 17.76 mm in width. It boasts a kernel ratio of 52%–54%, and the fat content ranges from 58% to 63%.

The Foşa hazelnut cultivar, also known as Yomra and Boyhane, is extensively cultivated in Trabzon and Düzce provinces. The shell of this cultivar is reddish-brown with an average thickness of 1.20 mm, possessing a moderately hard texture. The top part is narrow, and the rind fruit averages 17.87 mm in width. It features a kernel ratio of 50%–53%, and the fat content is 66.69%.

The İncekara hazelnut cultivar, with a very limited cultivation area, features a small and outwardly fluffy top part. The bark is matte and dark brown, and the fruit is large and pointed. The shell thickness is thin, measuring 0.96 mm. The shell fruit has dimensions of 21.19 mm in length and 17.47 mm in width, with a kernel ratio of 50%–52% and a fat content ranging from 68% to 70%.

The Kalınkara hazelnut cultivar, also known as Giresun Karası, is primarily produced in the Giresun province. It features a dull, dirty brown shell with an average thickness of 1.3 mm. The top part exhibits a dun color, and the fruit is round with a raised middle in the table part. The shell fruit measures 19.27 mm in length and 19.03 mm in width, boasting a kernel ratio of 48%–49% and a fat content ranging from 59% to 64%.

The Kara hazelnut cultivar, also known as Karayağlı and recognized for its high yield, is extensively produced in Düzce and Sakarya provinces. Known for its high adaptability, this cultivar remains unaffected by late spring frosts and exhibits resilience against diseases and pests. It features a high shrivel kernel ratio and a notable periodicity tendency.

The Kargalak hazelnut cultivar is partially cultivated around Giresun, Trabzon, and Hopa. It is distinguished by its thick and hard shell, averaging 1.33 mm in thickness. The shell fruit measures 18.58 mm in length and 23.75 mm in width. It features a kernel ratio of 46%–58% and a fat content ranging from 57% to 63%.

The Kuş hazelnut cultivar, with a production that is relatively limited, features a glossy brown shell averaging 1.1 mm in thickness. The nut measures 19.08 mm in length and 16.28 mm in width, with a kernel ratio of 49%–51% and a fat content ranging from 56% to 61%.

The Mincane hazelnut cultivar, also known as Sarı Fındık, Sarı Yağlı, and Sıra, is extensively cultivated in the Trabzon province and the Western Black Sea Region. The Mincane hazelnut cultivar, known for its low yield, features a light brown shell with a relatively protruding top. The shell is easy to break, with an average thickness of 1.2 mm. The nut size averages 18.96 mm in length and 17.50 mm in width. It has a kernel ratio of 48%–50%, and the fat content ranges from 59% to 65%.

The Okay 28 hazelnut cultivar, known for its high yield and kernel ratio, boasts a nut weight of 2.85 g and a kernel weight of 1.53 g. The shell thickness is 0.74 mm, with a kernel ratio of 54.6%. It has a fat content of 61.3%, and the time of leaf bud burst occurs between 15 and 25 March.

The Palaz hazelnut cultivar, extensively cultivated in Ordu and Samsun provinces, features a nut size of 16.01 mm in length and 19.26 mm in width. The shell is dull brown with an average thickness of 1.66 mm, and it boasts a kernel ratio of 49%–51%. The fat content ranges from 64% to 68%.

The Sivri hazelnut cultivar, prevalent in hazelnut production areas and widely grown in Giresun province, is recognized for its high yield. The mature fruit of the Sivri cultivar is flattened on both sides, long, and pointed. The shell is shiny, light brown, with a slightly dirty white tip, and has an average thickness of 1.05 mm. The shell fruit measures an average of 20.71 mm in length and 14.88 mm in width. It boasts a kernel ratio of 49%–50%, and the fat content ranges from 65% to 68%.

The Tombul hazelnut cultivar, known by synonyms such as Yağlı Fındık and Giresun Yağlısı, is extensively produced in Giresun province. It averages 17.58 mm in length and 17.04 mm in width, with a kernel ratio of 50%–52%. The shell is clear, shiny, brown, featuring a dirty white pile from the tip to the half, and has an average thickness of 1.10 mm. The fat content is in the range of 69%–72%.

The Uzunmusa hazelnut cultivar, also known as Oskara Yağlısı and Enişte Fındığı, is extensively produced in Ordu province. Its shell is reddish-brown with an average thickness of 0.99 mm. The nut size averages 18.85 mm in length and 17.52 mm in width. It boasts a kernel ratio of 54%–56% and a fat content ranging from 64% to 68%.

The Yassı Badem hazelnut cultivar, also known as Değirmendere Fındığı, is characterized by a notably low yield. Its nut is flat on both sides, quite long, expanding from the plate, then narrowing and ending with a blunt tip. The shell is glossy brown, with an average thickness of 1.3 mm, a length of 24.45 mm, and a width of 14.93 mm. It has a kernel ratio and fat content of 48%–49% and 57%–62%, respectively.

The Yuvarlak Badem hazelnut cultivar, also known as Değirmendere Fındığı, is extensively produced in Düzce and Sakarya provinces. The nut is quite long and pointed, with an average size of 24.35 mm in length and 15.14 mm in width. The shell thickness is approximately 1 mm, and it features a kernel ratio and fat content of 51%–52% and 58%–61%, respectively.

The Turkish (Bolu) hazelnut cultivar, also known as Ayı Fındığı and Ağaç Fındığı, is characterized by a nut size of 17.12 mm, a kernel size of 11.85 mm, a shell thickness of 2.59 mm, a kernel ratio of 30.8%, and a fat content of 60.5%.

System Architecture
The proposed Hazelnut Databank System (HDS) has been developed based on microservices architecture and also it involves the semantic web and IoT technologies. The system architecture has three layers such as “Users,” “Client Applications,” and “Microservices.” The software applications of the HDS have been developed considering the layered architecture style.

The users of a software system refer to individuals who interact with a software application or system to accomplish specific tasks. They can be classified into different categories based on their role, level of expertise, and level of interaction with the software. It is essential to understand the needs and requirements of potential users to ensure the HDS is user-friendly, efficient and meets their expectations. Furthermore, understanding the needs and requirements of the potential users is critical for the success of HDS. Potential users of HDS can be individuals or organizations that demand benefits from its usage. These users may vary depending on the type of client application, its purpose, and the target audience. Potential system users of HDS may include researchers, farmers, scientists, and newcomers to hazelnut farming who may benefit from the features and functions offered by the system, such as improved productivity and streamlined process capabilities.

When it is considered that the users of the HDS can be classified into different categories based on their characteristics and needs, the necessity for the implementation of different types of software applications has emerged. Six different client software applications have been developed to meet such requirements. The first software application is a desktop application that has been developed with C# programming language by using .NET Core Framework. Users can perform the hazelnut classification process by selecting the image of the hazelnut. After that, they can access detailed information about the hazelnut cultivar whose classification process has been completed by clicking the “Details” button on the application user interface. The second software application of HDS is a web application. The web application has been developed with C# programming language by using ASP.NET Core MVC. The web application constitutes the web-based version of the desktop client application of HDS. The web-based software application has been developed to realize an application accessible over the internet via a web browser so that users can perform the classification process and access detailed information about the hazelnut cultivar. Similar to the processes performed by the users on the desktop client application, they should upload a picture of the hazelnut to the application to classify and get detailed information about the relevant hazelnut cultivar. The third application takes the form of a universal Windows platform (UWP) application designed specifically for Windows Operating System-based computers. Developed using Xamarin.Forms, this UWP client application leverages XAML (Extensible Application Markup Language) for constructing user interfaces, complemented by code-behind in C#. This versatile framework empowers developers to create cross-platform applications, spanning Xamarin.Android, Xamarin.iOS, and Windows environments. The fourth software application constitutes a mobile application that has been specifically designed for devices that operate on the Android operating system. This particular application has been meticulously crafted through the utilization of the C# programming language, employing the framework of Xamarin.Forms. The fifth client software application is another mobile-based software application developed for devices with the iOS operating system. Similarly, this application has been developed with C# programming language using Xamarin.Forms. The last client software application is the IoT application developed with the Python programming language to run on Raspberry Pi tiny computers. This IoT device and software application has been developed as an external device for users who demand to classify Turkish hazelnut cultivars and obtain detailed information regarding the relevant hazelnut cultivar in a laboratory environment.

Microservices architecture is a software development approach that focuses on breaking down complex applications into smaller, independent components or services. Each microservice operates as a standalone unit, providing a specific function or feature, and communicates with other microservices through well-defined APIs. This modular structure allows for greater flexibility, scalability, and easier maintenance of the overall system. In a microservices architecture, each microservice operates as an autonomous unit, allowing for rapid and parallel development, deployment, and scaling of individual services. This also allows for the replacement of a single microservice without affecting the entire system. Microservices architecture has increasingly been adopted in modern software development due to its benefits for large-scale, complex applications. Overall, microservices architecture has represented a significant shift in software development that has the potential to increase the efficiency, scalability, and resiliency of modern applications. Taking into account the strong characteristics of microservices architecture, HDS has implemented this approach to address the challenges related to heterogeneity, interoperability, scalability, agility, reliability, and maintainability. By leveraging the advantages of microservices, HDS has aimed to improve the overall efficiency, scalability, and resilience of its client applications. There are three different microservices such as Hazelnut Classifier Service (HCS), Authentication Service (AS), and Semantic Web Service (SWS) belonging to HDS. The architecture of HDS uses the API (Application Programming Interface) Gateway pattern that provides a single entry point for the HCS, AS, and SWS. Despite the HDS is not so large or complex microservice-based system, it has multiple client apps, therefore it has been considered that using API Gateway is a good approach. Each of the microservices of HDS has been developed with C# programming language using ASP.NET Core Web API. In addition to that Ocelot has been used in the development of the API Gateway. The Ocelot is a highly specialized Open Source API Gateway developed and compatible with ASP.NET Core Web API technology. It has been specifically designed to cater to the needs of microservices-based architectures by providing a centralized and unified entry point into the system.

The hazelnut classification machine learning model for Turkish hazelnut cultivars has been developed utilizing the C# programming language and the ML.NET (Machine Learning for .NET) framework. ML.NET is an open-source and cross-platform machine learning framework that enables the creation of custom ML models using either C# or F# within the .NET environment. The hazelnut classification machine learning model in this study used a combination of ResNet-50 and a DNN to classify the Turkish hazelnut cultivars. The training data set of the classification ML model, whose accuracy value was obtained as 95.77%, consists of 3891 images.

HDS obtains detailed information regarding Turkish hazelnut cultivars from RDF/XML (Resource Description Framework/Extensible Markup Language) datasets through SPARQL (SPARQL Protocol and RDF Query Language) queries and demonstrates the obtained information to the users of the client software applications in an appropriate format. Wide variety of information such as abortive kernel ratio, blank nut ratio, cracked nut ratio, cultivar name, cultivar pollinizers, cultivar synonyms, double kernel ratio, fat content, fibrousness, kernel cavity, kernel ratio, kernel size, kernel weight, moldy kernel ratio, nut size, nut weight, pellicle removal ratio, protein content, shell thickness, shrivel kernel ratio, time of female flowering, time of leaf bud burst, time of leaf fall, time of male flowering, time of ripening, weevil kernel ratio can be retrieved regarding Turkish hazelnut cultivars from the RDF datasets. The data within the RDF datasets have been provided in RDF/XML format as is sampled in Table B1, however, the HDS has also the capability to provide such data in different types of open formats such as RDF/JSON (Resource Description Framework /JavaScript Object Notation), RDF/XML, Notation 3, N-Triples, or Turtle (Terse RDF Triple Language).

Validation and Testing Hazelnut Databank System
Performance Testing
Performance testing is an integral part of the development of the HDS and has been used to evaluate the efficiency, reliability, and scalability of its software client applications. The primary goal of performance testing is to identify and eliminate bottlenecks in the whole system and improve the overall users’ experience with the HDS. Performance testing has involved testing the HDS under various loads and conditions to determine its behavior and identify any potential issues that may impact performance. Performance testing is an ongoing process that begins during the development phase of the HDS and continues throughout the whole development and deployment processes of the HDS. The purpose of conducting regular performance tests is to ensure that the HDS meets performance expectations and delivers an optimal user experience.

In this study, we undertook a meticulous evaluation of the performance exhibited by three key microservices within the Hazelnut Databank System (HDS), namely HCS, AS, and SWS. This assessment centered around measuring the response time of these microservices in handling a predefined set of requests. The evaluation itself was conducted utilizing Apache JMeter, a robust open-source software renowned for its performance testing capabilities. The microservices were deployed on a virtual private server (VPS) that utilized the Internet Information Service (IIS) platform. The VPS was hosted on a 64-bit Windows Server 2019 operating system that featured an Intel® Xeon® CPU E5-2620 v4 @ 2.10 GHz processor and 24 GB of RAM.

To investigate the behavior of the HCS, AS, and SWS microservices, the study utilized five distinct HTTP request test plans. The test cases involved the submission of 100, 250, 500, 750, and 1000 requests to the server at 300-s intervals, through the HCS, AS, and SWS microservices. Performance tests were executed on a 64-bit Windows 10 operating system, using an 11th Gen Intel(R) Core(TM) i7-1165G7 @ 2.80 GHz processor and 48 GB of RAM.

Table 2 displays the experimental findings acquired during the performance evaluation of the AS microservice. These findings comprise the mean response time, minimum response time, maximum response time, and throughput measured in Kilobytes per second.

Based on the test outcomes, it is observed that for request volumes below 100, the AS microservice exhibits an average response time of 79 ms, with minimum and maximum response times of 64 and 156 ms, respectively. In contrast, when the request volume is increased to 1000, the AS microservice demonstrates an average response time, minimum response time, and maximum response time of 122, 59, and 3092 ms, respectively. A comparative analysis of these response times is depicted.

The outcomes derived from the performance assessment of the AS microservice illustrate that the system possesses the ability to sustain stability and availability, even when the number of user requests escalates, up to 1000 clients.

The SWS microservice plays a crucial role in the system, as it is tasked with retrieving exhaustive information regarding categorized Turkish hazelnut cultivars through SPARQL queries from RDF/XML datasets. Thus, it is of utmost importance to conduct performance testing of the SWS microservice to assess its resilience. The performance testing results of the SWS microservice are reported, encompassing the average, minimum, and maximum response times recorded at the peak request volume of the system, as 122, 63, and 3081 ms, respectively.

A comparative illustration of the average, minimum, and maximum response times of the SWS microservice is presented. The results indicate that with an increase in the number of HTTP requests, the maximum response time experiences a gradual ascent, attributed to the concurrent rise in throughput, measured in Kilobytes per second. These findings suggest that the performance of the proposed system would remain unaffected by an escalation in the aggregate number of client devices.

The HCS microservice plays a pivotal role in the proposed system, as it receives images of Turkish hazelnut cultivars and returns the corresponding classification label to client applications. Thus, it is imperative to monitor the performance of the HCS microservice to ensure the sustainable operation of the system. The results of the performance testing for the HCS microservice are outlined, where the average, minimum, and maximum response times at the highest request volume are recorded as 2761s, 767, and 6679 ms, respectively. The throughput measurements for received and sent data have been quantified as 3.45 Kilobytes per second and 458.55 Kilobytes per second, respectively.

A comparative analysis of the average, minimum, and maximum response times of the HCS microservice, concerning the total number of HTTP requests recorded during a 5-min interval.

The present section delineates the results of the performance assessment for the HDS, with a particular emphasis on the evaluation of three microservices that were developed in the context of this study. As the HDS represents a composite system of scientific software applications, the intended user base was estimated to range from 100 to 1000 within a 5-min timeframe. The results of the testing procedures reveal that the HDS fulfills the anticipated performance specifications. However, the usability of the HDS must also be examined. Accordingly, the subsequent section of this study addresses the usability testing of the HDS.

Usability Testing
Usability testing is a crucial aspect of software development that evaluates the user experience of a software application. The goal of usability testing is to determine how easily and efficiently users can interact with the HDS to achieve their goals. The usability testing of the HDS involves observing real users as they perform tasks using the HDS and collecting feedback on their experiences. The major objective of conducting usability testing is to obtain such feedback which is then used to make improvements to the design and functionality of the HDS, resulting in more user-friendly and efficient software applications belonging to the HDS. Usability testing can be performed at various stages of the development process, including during the prototyping phase, during development, and after the software is released. It has been preferred to conduct usability testing after the HDS is released within the scope of this study to identify to what extent the HDS meets the needs and expectations of its users.

A usability study, comprised of 60 questions across six scales (appropriateness recognizability, learnability, operability, user error protection, user interface aesthetics, accessibility), was conducted on 20 participants to allow them to attain specified goals within the HDS’s mobile software applications effectively, efficiently, and satisfactorily within a specified context of use. Thus the overall usability score of HDS’s mobile software applications has been determined. The scales or in other words, sub-characteristics of the usability survey have been defined by the ISO/IEC 25000 SQuaRE (Systems and Software Quality Requirements and Evaluation), a comprehensive framework for evaluating software product quality.

In the usability survey conducted on the users of mobile-based software applications of HDS, 10 different questions were asked to determine the ratio of each scale within the overall usability score. There exist five different options such as strongly disagree, disagree, neither agree nor disagree, agree, and strongly agree in the survey. The reliability of the usability survey has been calculated using Cronbach’s Alpha. The result indicates that the reliability of the survey is excellent with a value of 0.94.

The internal consistency of the usability survey scales was assessed by calculating the Cronbach’s Alpha value separately for each scale. The Appropriateness Recognizability and User Interface Aesthetics scales exhibited “Good” internal consistency, with Cronbach’s Alpha values of 0.85 and 0.88, respectively. The Learnability and Operability scales demonstrated “Excellent” internal consistency, with Cronbach’s Alpha values of 0.91 and 0.92, respectively. The User error protection and Accessibility scales had Cronbach’s Alpha values of 0.76 and 0.78, respectively, indicating an “Acceptable” level of internal consistency. These findings suggest that there is room for improvement in the HDS’ mobile software applications about User error protection and Accessibility scales.

The present section of this study aimed to assess the reliability of the usability questionnaire and its scales, which evaluate mobile software applications in terms of usability. The usability questionnaire was administered to 20 users, and the obtained data were analyzed to calculate the general usability score of the software applications, which was found to be 42 out of a maximum of 50, indicating high usability. The individual scale scores were also analyzed, with appropriateness recognizability, learnability, operability, user error protection, user interface aesthetics, and accessibility scales receiving scores of 44, 45, 46, 28, 46, and 44, respectively.

These results highlight that the user error protection scale received the lowest score, suggesting that the software applications should incorporate better-designed input–output processes and provide necessary messages for data entry forms in sub-modules.

Discussion
This study entails the development of an integrated information system that leverages contemporary software architecture, namely microservices architecture, which has been implemented in various types of systems, including land administration systems, greenhouse systems, aquaculture value chain traceability systems, energy management systems, smart distribution transformer area, control system, groundwater management system, smart water usage, by utilizing the semantic web and internet of things (IoT) technologies. The designed Hazelnut Classification System (HDS) addresses the categorization of 18 Turkish hazelnut cultivars, offering comprehensive information tailored to diverse stakeholder needs. HDS comprises web, desktop, and mobile applications, demonstrating heterogeneity across various dimensions—such as operating systems, programming languages, frameworks, and data storage. Notably, the system integrates Windows Server 2016 for hosting microservices, Windows 10 for universal Windows applications, Raspberry Pi OS for IoT devices, and Android/iOS for mobile applications. Development involves C# for microservices and mobile apps, including universal Windows, Android, and iOS, while Python is used for IoT applications. Data storage utilizes Microsoft SQL Server 2017. Despite the inherent challenges in integrating diverse technologies, the adoption of microservices architecture in the system effectively addresses these concerns. Microservices architecture has proven to be highly effective in dealing with heterogeneity. The microservices within the system underwent thorough performance testing, crucial for ensuring optimal system functionality. Analysis of performance test results reveals satisfactory metrics, affirming the effective operation of HDS. Each microservice is designed as an autonomous API following the REST architecture, leveraging HTTP verbs for seamless interoperability and adherence to microservices principles. The architecture’s isolating feature ensures unaffected components during test case executions, enhancing overall system productivity. Usability surveys on HDS software applications involve 20 users, evaluating criteria such as appropriateness recognizability, learnability, operability, user error protection, user interface aesthetics, and accessibility. The overall usability score of 42 out of 50 indicates favorability, with the user error protection criterion suggesting potential for refinement in future software versions. It is crucial to clarify that the study focuses on constructing an integrated information system, utilizing machine learning for hazelnut classification. The DNN+ResNet50 model achieves an accuracy of 95.77%, acknowledging room for improvement compared to existing literature. Despite lower accuracy, the study emphasizes the integration of modern software architecture and a reasonably accurate machine-learning model for a holistic approach.

While this research focuses on 18 Turkish hazelnut cultivars, it is important to highlight that Turkey hosts 21 distinct cultivars. Future studies could expand the classification model developed here to include all 21 varieties. Additionally, the findings of this study offer a valuable reference for classifying hazelnut cultivars in other countries where hazelnut farming is commercially significant.