Building an Interoperable IoT Ecosystem for Data-Driven Agriculture

Krunoslav Tržec, Mario Kušek, Ivana Podnar Žarko

University of Zagreb, Faculty of Electrical Engineering and Computing, Zagreb, Croatia

Abstract—Climate change with its extreme weather conditions and the shift to organic farming pose new challenges for crop production in Europe. Continuous and dense monitoring of crop condition and environmental parameters in the fields using various Internet of Things (IoT) devices creates Big Data for data-driven agriculture and provides the opportunity to address these challenges. However, it is extremely complex to develop a large-scale system that integrates a variety of heterogeneous data sources to provide farmers and agronomists with simple and usable tools, such as assessing current field conditions, estimating crop stress levels, or determining the best time to apply certain cultivation practices. One solution to this problem is to design and implement an interoperable IoT ecosystem for data-driven agriculture that turns the data from multiple sources into knowledge, providing valuable insights and appropriate decisions based on the analysis of sensor measurements delivered from IoT devices.

The paper presents the architecture and design of an ecosystem for data-driven agriculture which includes a cloud-native and microservice-based IoT platform. The novel contribution of our proposed approach is the IoT platform with effective interoperability solutions for integrating different types of edge devices used in agricultural practices for continuous monitoring of agrometeorological and crop conditions, as well as flexible means for integrating different analytical and data visualization services ensured by strict access control mechanisms.

Index Terms—smart agriculture, IoT platform, interoperability, cloud-native architecture, microservices

Introduction

Data-driven and IoT-enabled agriculture is today considered a viable solution to meet the challenges of climate change, which poses a major threat to crop growth and food production. Crop production is particularly sensitive to extreme weather conditions, especially at key times in the growing season that are becoming increasingly unpredictable. Unexpected frosts in late spring or droughts and floods in summer can severely damage crops and lead to irreversible losses in harvest quantity and quality. Therefore, it is now more important than ever to monitor both the crops and the environment to make appropriate agricultural interventions at the right time based on the current situation in the fields. Additionally, data-driven agriculture facilitates a gradual transition to organic farming by providing the opportunity to reduce the traditional inputs required for crop growth. It can be seen as an enabler for the strategic goal of the European Farm to Fork strategy to farm 25% of the EU’s agricultural land organically by 2030.

IoT technologies bring significant improvements into the agricultural sector, as the tedious job of data collection, processing, and analysis can now be fully automated. Remote monitoring of environmental parameters is now possible with low-cost sensors, and the significance of automation in farming processes has become an important research topic for sustainable agriculture development.

IoT-enabled smart farming is anticipated to make maximum extraction of values from the data. Connected devices, automated collection, and targeted analysis of data help in upgrading the production process. Data obtained from multiple sources is fed to a system that processes and interprets the data to support farmers in decision-making.

Data-driven agriculture uses various data sources placed in the fields (e.g., sensors for continuous monitoring of environmental parameters, soil, and crop status). However, in most monitoring systems, it is not easy to integrate various data sources to gain valuable insights which can be deduced from the relationships between these data. Moreover, the ability to provide the right data at the right time, while incorporating contextual information, has not been widely exploited in data-driven and IoT-enabled agriculture.

Early agricultural IoT systems mainly focused on the application of several sensor nodes. Such systems gradually fail to meet the growing demand of agricultural production due to limited scalability and interoperability of the entire system. Later, the layered models of IoT-enabled smart farming were proposed, based on the specific needs of agricultural production, combined with the requirements of information security and system manageability. Such models are usually divided into several layers and the data are transmitted between the layers using different communication protocols.

Deployment of new and improved IoT devices, advancements in communication standards, usage of cloud-based systems, and development of data science have led to the conversion of data into valuable actions. Data management is of fundamental importance in smart farming because high volumes of data that are obtained must be handled in a manner wherein retrieving valuable insights should be possible. Transferring data management to an IoT platform makes it easier to control the processing and flow of information. Furthermore, data-driven smart agriculture allows the user/farmer to decide the allocation of access rights so, in this aspect, the user can retain ownership of the data.

Related Work

Since the IoT technology was first proposed in 1999, it has gradually penetrated various fields, including agriculture. Regarding the concept of agricultural IoT, different researchers have given different interpretations from different perspectives. The agricultural IoT refers to the use of relevant sensing devices to perceive information on environmental factors in plants, agricultural production tools, etc., and an information network for real-time monitoring of agricultural production processes, positioning, and management of agricultural production objects based on standardized protocols for data transmission. The emergence of cloud computing and its extended edge computing models have made a step further towards complete transformation of the management and operation of the farm.

Nowadays, IoT technologies permeate agriculture, resulting in so-called smart agriculture. Precision agriculture includes a set of technologies that combines sensors, information systems, enhanced machinery, and informed management to optimize production by accounting for variability and uncertainties within agricultural systems. It is important to emphasize that smart agriculture and equivalent paradigms are not coupled to a single technology. Rather, they comprise a mix of technologies that must be utilized according to need and context. For example, a wide area network monitoring system combining NB-IoT and LoRa wireless communication technologies.

The agricultural IoT has made great progress in recent years. Advancements have been made through several aspects including monitoring, data processing, and support to decision-making. Moreover, it has enabled automation of the agricultural processes and predictive analytics using Big Data approaches. By analyzing agricultural IoT systems, it can be observed that the development of such systems is not only reflected in the rapid growth of the types and quantities of agricultural sensors, but also in the diversity of emerging communication technologies. However, there are only a few papers related to solving interoperability problems in agricultural IoT. So far, the most complete solution which integrates various heterogeneous hardware and software resources and enables the seamless sharing of data and knowledge throughout the agri-food chain has been given.

Requirements

An IoT ecosystem for data-driven agriculture should possess features and services that ensure comprehensive data collection, intelligent processing, and insightful visualization of sensor data. First and foremost, this means that the applied IoT platform should provide appropriate tools for data collection from heterogeneous sensors and devices using various communication protocols, while also providing the ability to store and manage the data. Moreover, it should provide farmers with useful analytical services and data visualization on different user end-devices (smartphones, tablets, etc.). Last but not least, security controls should be implemented in terms of data confidentiality and integrity, as well as authenticated and authorized access to the system.

To facilitate the seamless exchange of data between diverse IoT devices and the platform services/resources, the IoT ecosystem for data-driven agriculture should implement technical standards/protocols which provide the structure for moving data around in the ecosystem. The ecosystem should provide syntactic interoperability that allows devices and services to communicate and exchange data. Several standards and protocols are being worked on to enable syntactic interoperability. The type of message format can range from binary encoded to data interchange formats like Java Script Object Notation (JSON).

Data alone has limited value and usability. To make sense of data, we have to interact with it and organize it. This process produces information. Turning this information into knowledge, which reveals relationships between information items, requires further effort. The transformation process ensures semantic interoperability. Knowledge gives rise to insights that serve as guidance and can be converted to actions. This action is where the true value of data resides.

Consequently, the IoT platform should provide management of semantic networks which contain concepts and relationships that are relevant to the domain of interest and to the specific service an application should deliver to user/farmer. By providing syntactic interoperability on one side, and semantic interoperability on the other side, the data-driven ecosystem for agriculture will enable the development of mobile or web applications tailored to the preferences of the users/farmers. Moreover, it will provide valuable insights which can be deduced from relationships between data of interest.

Finally, modern IoT platforms should evolve towards cloud-native architecture with software that can be delivered fast, scaled dynamically depending on the needs, and always available and resilient to failures while optimizing costs. A microservice architecture can be used to develop cloud-native applications. In such an architecture, each microservice is designed as an atomic piece of software. These independent software components run as potentially replicated processes distributed across multiple servers.

Architecture and Design

Our ecosystem for data-driven agriculture includes, on one side, different IoT devices/gateways (sensor nodes, agrometeorological stations, etc.) and, on the other side, diverse end-user/farmer devices (smartphones, tablets, etc.). All these devices represent the so-called edge devices due to their edge position in the communication network. In between is an IoT platform with independent software components/services running as multiple processes distributed across multiple servers in the cloud.

To provide edge devices with standardized interfaces towards the platform which is built from scalable and easily deployable services in a cloud environment, the IoT platform has been designed following the 15-factor methodology.

It is based on the 12-factor methodology that is suitable for deployment on modern cloud platforms and proposes the following principles: Use of declarative formats for deployment automation, a clean contract with the underlying operating system, minimization of divergence between development and production, and scaling without significant changes to tools, architecture, or development practices.

In comparison with the 12-factor methodology, the 15-factor development methodology adds three additional factors: Application Programming Interface (API)-first, telemetry, and authentication and authorization.

All components/services are containerized, i.e., packaged in containers. The containers provide an efficient, but constrained, environment similar to a virtual machine. They contain all the software, including settings, libraries, and other dependencies, needed to run them. Nowadays, Docker containers are one of the most popular types of containers used in cloud-native applications. The true power of containers becomes clear when orchestration is available for them. With an orchestrator, automated deployment, scaling, and management of containerized applications is enabled.

IoT devices and gateways are connected to the IoT platform using a secure version of the MQTT protocol. The MQTT protocol is a publish-subscribe protocol designed for messaging on resource-constrained devices and in low-bandwidth environments, without compromising messaging reliability. Its secure variant, MQTTS, allows an encrypted connection to be established between a message broker and clients. The message broker has multiprotocol capabilities. It can be used as a bridge from the MQTT protocol to the Advanced Message Queuing Protocol (AMQP) which enables flexible message routing, configurable message durability, and multi-cloud communication.

End-user devices communicate with the IoT platform by applying the secure version of Hypertext Transfer Protocol (HTTP), HTTPS. This protocol provides an encrypted connection to the reverse proxy which then routes the HTTP messages to the appropriate platform component/microservice. The time series database stores sensor measurements, which are indexed and sorted by time. It is a NoSQL database for which no schema needs to be defined in advance. Therefore, database clients can easily store and retrieve data via the HTTP API.

Raw sensor measurements are usually binary encoded due to the low bandwidth of wireless connections and the need for energy-efficient processing on the IoT devices. A device/gateway publishes binary encoded measurements using MQTTS messages received by the message broker. Then, the measurement data is routed to the appropriate microservice which transforms sensor data into a data format compatible with the time series database records. Consequently, the microservices for data ingestion and transformation enable syntactic interoperability.

End-user devices can access the IoT platform through a reverse proxy that acts as a Transport Layer Security (TLS) termination proxy and provides HTTPS connections between the end-devices and the platform. Among other things, the reverse proxy routes HTTPS request from the end-devices to the appropriate microservice. The HTTP-based microservice API defines which features the microservice can provide and how others can interact with this microservice.

The OpenAPI specification is a formal method for describing HTTP-based APIs, which are typically RESTful APIs. REST is a collection of principles for designing networked systems. The principles in REST aim to simplify and decouple the API from the underlying services that serve the API. An OpenAPI definition comes in the form of a JSON or YAML file that describes the inputs, outputs, and available operations of an API. It can also include information such as where the API is hosted, what permission is required for access, and other details needed by consumers and producers. In the IoT platform, microservices for data management and analysis expose REST APIs, enabling mobile applications to retrieve scene templates with corresponding views, taking into account authorization permissions a user/farmer possesses.

APIs almost always include some form of authentication and authorization, so it is important to describe it here. Nowadays, there are multiple standards for dealing with authorization, each with different trade-offs and strengths. OpenID Connect (OIDC, an extension of OAuth 2.0) and OAuth 2.0 are the industry-standard protocols for authentication and authorization which the platform enforces from mobile applications to gain access to the appropriate IoT platform microservice. Since mobile applications cannot securely store a client secret, they have to implement a grant type named Authorization Code Flow with Proof Key for Code Exchange (PKCE). Moreover, PKCE is designed to prevent interception of the authorization code by a malicious application that could otherwise sneak into the device.

When a mobile application has been successfully authenticated by an OIDC/OAuth 2.0 identity and access management server, it gains access to a required resource, i.e., a microservice. The mobile application retrieves scene templates. The scene templates are defined by the REST API of microservice for data management and analysis. The API describes a scene with predefined tags. The scene templates with corresponding tags are stored in the NoSQL document database. Furthermore, the microservice can make analysis and offer additional similar scenes that can be of interest to user/farmer. This is done using a graph/semantic network stored in the graph database.

A graph database enables storage and manipulation of entities and the connections between these entities. A graph database supports building a label property graph model to tie a set of attributes to graph structures and add classes or types to nodes and relationships. This data model allows a more complex set of query features, such as projection, filtering, grouping, and counting. Using the nodes of type Tag, relationships between them, and an appropriate graph algorithm, the microservice for data management and analysis enables semantic interoperability by discovering tags similarity in the graph.

Implementation Details

As a first step to validate the proposed architecture in practice, we implemented a proof of concept and carried out a series of experimental evaluations. The implemented prototype contains several open source components/attached resources that are treated as backing services according to the 15-factor methodology. In the IoT platform, these services are different databases, message broker, reverse proxy, identity and access management server, and visualization server. Moreover, LoRa-based IoT devices communicate with the IoT platform according to the LoRaWAN standard protocol, so four additional services are required: LoRaWAN network server, LoRaWAN application server, in-memory datastore, and relational database.

InfluxDB 2.0 is used as a time series database in the platform. It is an open source NoSQL time series database which provides a powerful HTTP API with read and write capabilities. It also provides the Flux query language which is used for querying time series data. InfluxDB enables authentication by using tokens and authorization by providing management of organizations/users and their read and/or write permissions.

MongoDB is used as a document-oriented database in the IoT platform. It is an open source NoSQL database which stores data in JSON-like documents. Its role in the platform is to store scene templates, as well as to facilitate authorization for scene usage in the mobile applications according to defined user/farmer roles. Additional relationships between scene tags are stored in the Neo4j database, which is an open source NoSQL graph database. It is accessible over the network through a transactional HTTP API or the binary Bolt protocol. Cypher is the query language supported by Neo4j. It is a declarative language for describing visual patterns in graphs. By using its syntax, a graph pattern can be described in a visual, logical way.

All edge devices have to access the IoT platform in a secure way, either through the message broker or reverse proxy. RabbitMQ has been used as an open source message broker in the prototype. It supports AMQP and other protocols. Its protocol neutrality and plugin extensibility makes it a good choice for multiprotocol application architectures. RabbitMQ security is provided at multiple layers. Connections can be secured by enforcing TLS-only communication and client certificate validation. User access can be managed at the virtual-host level, providing isolation of messages and resources at a high level. In addition, access to configuration capabilities, reading from queues, and writing to exchanges is managed by regular expression pattern matching.

NGNIX is used as a reverse proxy. It is an open source reverse proxy server for HTTP, HTTPS, SMTP, POP3, and IMAP protocols, as well as a load balancer, HTTP cache, and a web server. NGNIX’s modular event-driven architecture can provide predictable performance under heavy load. In our case, it acts as an HTTPS reverse proxy and as a single entry point for microservices which deal with data management and analysis for mobile or web applications. All microservices in the IoT platform are implemented using Spring Boot, an open source Java-based development framework for microservices. The core features of Spring Boot upon which everything else builds are autoconfiguration and simplified dependency management and deployment.

To support secure retrieval and routing of LoRaWAN messages from LoRa-based IoT devices, it is necessary to comply with the LoRaWAN standard and introduce LoRaWAN network and application servers in the IoT platform. Consequently, we have used the ChirpStack Network Server as an open source LoRaWAN network server and the ChirpStack Application Server as an open source LoRaWAN application server. The LoRaWAN network server ensures the implementation of security controls related to integrity and authenticity, while the LoRaWAN application server ensures data confidentiality by applying Advanced Encryption Standard (AES) symmetric encryption.

Keycloak is an open source identity and access management server which is used for authentication and authorization of users who want to connect with mobile or web applications to the IoT platform to retrieve sensor readings and relevant analytics. It is based on standard protocols and provides support for OIDC/OAuth 2.0. If role-based authorization is not sufficient, Keycloak also provides fine-grained authorization services. Mobile applications are required to authenticate to the IoT platform by applying the PKCE mechanism to prevent interception of the authorization code.

After successful authentication via mobile application, users can choose which scenes with corresponding sensor readings should be retrieved from the platform and visualized on smartphones, tablets, etc. The selection is facilitated by application of tags. Sensor readings from different IoT devices can also be securely accessed via the HTTPS protocol from web browsers using the Grafana open source visualization server for data exploration, analysis, and alerting. It has built-in support for the InfluxDB database. Therefore, panels which contain dashboards can be created to visualize sensor readings by querying the InfluxDB database with predefined Flux queries.

Conclusion and Future Work

In this paper, we presented the architecture and design of the ecosystem for data-driven agriculture. The ecosystem includes a cloud-native and microservice-based IoT platform designed using the 15-factor methodology. The platform provides sensor readings from IoT devices to mobile or web applications by leveraging platform microservices for syntactical and semantic data interoperability. Moreover, microservice APIs for mobile or web applications are formally described using the OpenAPI specification. Finally, we have provided the implementation details of the entire ecosystem for data-driven agriculture including the developed mobile application for flexible visualization of sensor readings according to farmer preferences and access rights, as well as the integration of heterogeneous IoT devices which use NB-IoT or LoRa communication modules and secure messaging to act as data sources for the cloud-native IoT platform.

To ensure high system resilience in the event of an unexpected service interruption that could be caused by a connection failure between IoT devices/gateways and the deployed IoT platform, future work will aim to design an even more distributed architecture by applying the fog computing approach. Furthermore, the mobile application will be extended with additional data visualization and analytics features and validated by agronomists and farmers in practice.

