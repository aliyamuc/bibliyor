Multi-Agent-Based Simulation of Intelligent Network System

Petro M. Tshakwanda, Sisay T. Arzo, Michael Devetsikiotis

Abstract—The agent-based approach to service design offers a distinct advantage over traditional microservice-based design by providing not only reactive responses but also the ability to proactively anticipate and address potential issues. This, coupled with other benefits, has made the use of multi-agent-based intelligent network service design a popular and cutting-edge paradigm in the field of network research. Recently, the introduction of a softwarized intelligent network architecture and design guidelines using agents as building blocks has been proposed for the upcoming 6G networks. However, despite this progress, there remains a lack of suitable simulation environments for evaluating the performance of multi-agent systems within these softwarized networks. In this work, we present the ongoing development and implementation of various network service agents utilizing the PADE framework. To facilitate this, we have also provided a GitHub link for the project. The implementation makes use of various machine learning and deep learning algorithms as possible evaluation scenarios. This experimental environment can also be utilized to perform a wide range of intelligent algorithm experiments.

I. INTRODUCTION

The advent of 6G technology promises to revolutionize the way networks operate by extensively utilizing in-network intelligence, specifically through the incorporation of artificial intelligence (AI) to address the demands of emerging applications with stringent requirements. This in-network intelligence will serve as a means of designing and optimizing networks with a high level of intelligence, enabling full network automation as a key feature of 6G. Recently, multi-agent systems (MASs) have been utilized to design softwarized intelligent network management processes and complex systems analysis. In this context, a multi-agent-based architecture for service design has been developed, with the goal of incorporating in-network intelligence to create beyond 5G (B5G) and 6G intelligent networks.

The emergence of new forms of services with diverse applications and stringent requirements places significant strain on existing networks. The rapid development of smart terminals, IoT devices, and connectivity infrastructures for interconnecting beyond earth into space, as well as a variety of intelligent services and applications, is driving the need for an intelligent network design approach when designing future networks. For instance, new applications with diverse requirements and behavior arrive due to the adaptation of AI in the design of end-user services and applications. The existing network couldn’t cope with the service dynamics and completely satisfy the growing traffic behavior and demands. To meet these stringent application and user behaviors, an intelligent network design approach needs to be taken when designing future networks.

MAS-based network management and design, in which a group of agents participate in a shared environment to accomplish a common goal, or a conflicting goal, may prove to be invaluable in optimizing resources with dynamic responses to future network demands. These intelligent MASs can be used to build network systems that are capable of performing complex tasks such as collecting and analyzing data from the network environment, forecasting data, and providing information to knowledge management systems such as decision support systems (DSS) and management information systems (MIS). Agents can observe, and measure network state. They can also store the network state data, and process, recognize, and classify the data intelligently.

Currently, a single framework and appropriate simulation environment are lacking for the experimental evaluation of intelligent multi-agent network systems and learning in real-world environments. Our ongoing project aims to fill this gap by proposing and developing a MAS-based AI-enabled intelligent network simulation architecture for future networks. This implementation provides a simulation of various service agents that can be used to build an intelligent network management system.

Furthermore, the implementation of the proposed MAS-based AI-enabled intelligent network simulation architecture will provide a testbed for experimenting with various smart network service agents such as Data Preprocessing Agents, Traffic Classifiers, Traffic Predictors, Database Management Agents, Service Agents, Quality of Service and intelligent service provisioning Agents, Data Analysis Agents, and more.

In summary, the focus of this paper is on designing a MAS-based framework for Intelligent Network Management System, designing a MAS-based simulation environment for Intelligent Network System, implementing the designed MAS framework integrated with PADE, and evaluating the performance of the MAS-based framework for Intelligent Network System using DL/ML algorithms.

The implementation of this project will also contribute to the advancement of the field of network intelligence by providing a means of evaluating and optimizing the performance of intelligent network systems in a simulated real-world environment. Additionally, it will serve as a valuable tool for researchers and industry professionals in the development and deployment of 6G and beyond networks.

II. RELATED WORK

Multi-agent system, owing to its unparalleled flexibility, has proven to be a highly effective solution for tackling complex issues across a wide array of disciplines. This makes it an invaluable tool for researchers and practitioners alike. It is not surprising, therefore, that there is a diverse array of multi-agent platforms that are specifically tailored to address the unique challenges of a particular field of study. Some notable examples include OpEMCSS, which is adept at simulating complex adaptive systems; MaDKit, which excels at simulating intricate supply chains; and NetLogo, which is skilled at simulating natural and social phenomena. However, while these platforms are highly specialized in their respective fields, they lack the generality to be applied in other domains, despite their powerful simulation capabilities. A plethora of advanced and versatile simulation platforms for Multi-Agent Systems (MAS) are readily available on the market. Among these cutting-edge simulation tools, RePast is a state-of-the-art simulation tool that is widely used in the field of social sciences, Mason is a powerful agent-based discrete event simulation tool, AnyLogic is a sophisticated simulation tool that is used to model discrete, dynamic, and hybrid systems, and Swarm is an industry-leading simulation tool that is used to simulate computer systems. The list of reputable simulation tools has been recently updated to include JADE, OsBrain, and PADE as the latest additions, which are all robust and feature-rich simulation tools for MAS.

The plethora of available agent platform options often poses a daunting challenge for developers and users when it comes to selecting the one that best suits their needs. As documented in the study by Melo et al., a variety of universal criteria, including platform properties, usability, operational capabilities, pragmatics, and security, are commonly used to evaluate MAS development platforms. Additionally, factors such as the programming languages supported and the availability of open-source platforms, which offer the added benefit of being free to use, also play a crucial role in the evaluation process. With so many options to choose from, it can be overwhelming to determine which platform is the most suitable for your specific requirements. However, by carefully evaluating each platform against these key criteria, developers and users can make an informed decision and confidently select the agent platform that will meet their needs.

JADE, OsBrain, and PADE have emerged as the most effective platforms for multi-agent development, thanks to their versatility and applicability to a wide range of domains, particularly intelligent network systems - the focus of our study. One key distinction between JADE and PADE is that JADE does not support higher-level programming languages like Python, which offers cutting-edge features used for cognitive agent development (such as machine learning and deep learning), and is more user-friendly than Java. OsBrain, on the other hand, lacks support for the Belief-Desire-Intention (BDI) concept, which results in a limitation on the agent’s internal reasoning capabilities. With PADE (Python Agent Development Environment), researchers can confidently construct their own agent-based models without the need for prior programming knowledge, eliminating the anxiety often associated with building agent-based models.

III. PROPOSED INTELLIGENT SYSTEM ENVIRONMENT

This section is about a cutting-edge, multi-agent-based network simulation environment, which has a sophisticated architectural framework. The article aims to showcase the advancement and progression of this simulation platform and highlight its internal and system architecture. The simulation environment represents a significant step forward in the field and provides unparalleled capabilities for research and analysis.

A. Agent Internal Architecture

Drawing upon our extensive experience in the field of multi-agent-based network automation, as evidenced by our seminal works in the area, this paper introduces a new approach to agent internal architecture by incorporating advanced cognitive components to enhance the agents’ decision-making abilities. This innovative architecture distinguishes this work from previous designs, and offers superior precision, efficiency, and reliability in network management. The agents possess powerful input and output capabilities that allow them to continuously monitor and analyze the state of the network, while also exerting precise and targeted control over the network to effectively manage it in accordance with predefined requirements. At the heart of the agent’s internal architecture lies its cognitive components - the "brain" of the agent, so to speak - that enable it to make informed and strategic decisions based on the knowledge and facts it has acquired through its input and analysis functions. These decisions are then translated into actionable strategies via the agent’s planning components, which in turn generate the necessary configuration files to effect the desired changes in the network. Finally, the agent’s validation component serves as a critical safeguard, ensuring that any decisions or actions taken by the agent are thoroughly vetted and deemed appropriate before being executed. This multi-layered, holistic approach to network automation allows for unparalleled precision, efficiency, and reliability in managing the network.

B. System Architecture

Our simulation utilizes various types of agents as building blocks to construct a comprehensive network management system. We meticulously design individual agents and strategically combine them to meet specific system requirements and functionality. Our multi-agent-based autonomous network management architecture encompasses a diverse range of agents, some of which are deployed in the cloud and orchestrated by orchestration agents, while others are placed at the network edge for localized domain functionality in proximity to the user. Our simulation also allows for various configurations of agent interactions to optimize the overall system performance.

C. Agent Placement and Chaining

One of the most significant obstacles in an agent-based network system is effectively placing and linking agents. To deliver services to a user, a series of agents must be executed in a specific sequence, known as agent chaining. For instance, a traffic predictor can be utilized to forecast the amount of incoming tasks in the next few hours, allowing the necessary resources or agents to be instantiated. Additionally, a traffic classifier agent can identify the type of traffic arriving, enabling the establishment of an agent chain to execute the required service processing, in accordance with the service level agreement, thereby delivering differentiated services. An example of service chaining serves as a proof of concept, illustrating how multiple agents can be linked together to form an agent chain for service processing. Furthermore, the deployment of various agents such as a traffic classification agent, traffic predictor, QoS agent, database management agent, routing agent, and orchestration agent, which have been developed in our initial simulation environment.

IV. IMPLEMENTATION OF THE MAS SIMULATION ENVIRONMENT

PADE is an essential tool utilized in this project to efficiently and effectively implement the proposed multi-agent system. PADE is a robust and versatile open-source software framework designed specifically for the development, execution, and management of multi-agent systems in distributed computation environments. The framework is built on the powerful Python programming language, making it highly accessible and user-friendly for developers. One of the key advantages of PADE is its support for automated systems, which is reflected in its extensive library of capabilities, such as message passing, agent creation, and remote execution. These capabilities make PADE an ideal choice for the development of sophisticated and advanced multi-agent systems.

A. Integration of our Framework with PADE

Our cutting-edge framework has been seamlessly integrated with PADE’s state-of-the-art architecture to unlock the full potential of the latter. The foundation of our stack lies at the hardware level, comprising of any device that is capable of running a mainstream operating system such as Linux, Windows, or MacOSX, with an open-source Python distribution (CPython 3.6 or higher) installed for ease of use. This encompasses a wide range of machines, including Raspberry Pis and other embedded systems development boards that utilize ARM-based processors and run Linux. The middle layer is supported by PADE modules, which provide a Python-Twisted support layer, enabling the development and execution of multi-agent applications based on their libraries and environment. This is the backbone of any complex multi-agent application. The Agent Management System (AMS) is responsible for managing the overall operation of the PADE platform, including agent creation, deletion, and migration. The topmost layer, known as the application layer, is where agents such as classifiers, predictors, databases, and QoS collaborate to accomplish the task at hand.

B. Multi-agent Implementation

An application that leverages the power of PADE is composed of a collection of agents, each distinguished by a unique name or identifier. These agents are able to communicate and interact with one another by exchanging messages through the use of a valid identifier. There are various methods outlined in literature for agents to share information and knowledge, but the majority of them employ the high-level abstraction method known as the Agent Communication Language (ACL). The platform utilized for message delivery offers a plethora of services, such as sending messages, setting up agents, migrating agents, managing resources, and much more. Multiple agents can coexist and operate simultaneously on the platform. The proposed MAS-based intelligent network system demonstrates the potential interactions between agents, such as the Data Collection, Preprocessing, and Classifier agents. Our study examines four distinct types of agents, namely Preprocessing, Classifier, Predictor, and Quality of Service (QoS). Each agent plays a unique and critical role in the overall process. The Preprocessing agent is responsible for preparing data that is used by the Network Traffic Classifier agent. The Predictor agent utilizes information provided by the Classifier agent to make predictions about incoming network traffic, available bandwidth on a given link, and labels. These predictions are then passed on to the Quality of Service agent, which uses this data to anticipate and mitigate network congestion for a specific user or link. Overall, these agents work together in a cohesive and seamless manner to optimize network performance and ensure the highest level of service quality. The Algorithm illustrates a prime example of the efficient and effective behavior of a QoS monitoring and provisioning agent. It demonstrates the ability to effectively monitor and provision Quality of Service, ensuring optimal performance for all users.

V. SYSTEM PERFORMANCE EVALUATION

In this section, we have presented the results of a comprehensive evaluation of our proposed multi-agent-based intelligent network system. This system was designed to address the current lack of a single framework and appropriate simulation environment for the experimental evaluation of intelligent multi-agent network systems and learning in real-world environments. We employed three different scenarios as agents in our system: a network traffic classifier, a predictor, and a Quality of Service (QoS) agent. Our simulation was conducted using the PADE platform on a powerful server, featuring an Intel Core i-7-5500U CPU and 16G RAM, running the Ubuntu 20.04.5 LTS operating system. These results demonstrate the capabilities and effectiveness of our system in addressing the challenges of intelligent multi-agent network systems and learning in real-world environments, making it a valuable addition to the field of network research. Furthermore, the results of this study can be applied to a wide range of industries and organizations, providing insights into how intelligent multi-agent systems can be implemented to optimize network performance and improve overall efficiency.

A. Metrics used for evaluation

One way to evaluate multi-agent systems is by considering the quality of service (QoS) provided by the system. This can be measured through metrics such as latency, accuracy, and decision errors. These metrics can provide insight into how well the system is performing in terms of providing timely and accurate results.

Another important metric to consider is power consumption. In a multi-agent system, the power consumption of each individual agent can have a significant impact on the overall energy efficiency of the system. Measuring and optimizing power consumption can help to minimize costs and maximize the sustainability of the system.

Computing complexity is also an important metric to consider when evaluating multi-agent systems. The more complex a system is, the more resources it will require to run and the more difficult it may be to maintain. Measuring and optimizing computing complexity can help to ensure that the system is as efficient and cost-effective as possible.

Finally, the communication latency between different agents can also have a significant impact on the performance of a multi-agent system. Measuring and minimizing communication latency can help to ensure that agents are able to exchange information quickly and efficiently, which can in turn improve the overall performance of the system.

Overall, evaluating multi-agent systems involves considering a variety of different metrics, including QoS, power consumption, computing complexity, and communication latency. By measuring and optimizing these metrics, it is possible to improve the performance and efficiency of the system, and ensure that it is providing the best possible service to its users.

B. Results and Discussions

WireShark was utilized to collect network data (within a campus network) at various intervals, such as 30 minutes and one hour, to simulate a real-world scenario in which the more data we collect, the higher the communication overhead will be. A summary of the performance of the preprocessing agent, the classifier agent, and the predictor agent, in terms of latency, accuracy, and loss statistics. It is important to note that these results are also dependent on other factors in the environment, such as the amount of traffic, bandwidth availability, and the availability of resources within the network. The MAS-based intelligent system platform demonstrates exceptional performance in terms of model accuracy and loss for both training and testing, using two hours of data collected and an Artificial Neural Network (ANN) architecture.

The PADE ACL not only facilitates the exchange of information between agents but also enables real-time monitoring of the network’s status. This allows for proactive identification and resolution of any potential issues, ensuring the smooth and efficient functioning of the network. The PADE ACL allows for the measurement of varying in-agent communication delays, including the time required for data collection (e.g. 30 minutes, 1 hour, 1 hour 30 minutes, 2 hours, etc.). This granular level of monitoring provides valuable insights into the performance of the network, allowing for continuous optimization and improvement.

The communication time between agents not only increases gradually as the data collection duration gets longer, but it also reveals a correlation between the amount of data collected and the number of features added to the messages exchanged between agents. As the volume of data increases, so does the complexity of the information being shared, leading to longer communication times. However, this presents an opportunity to optimize the network by identifying and reducing unnecessary features or implementing more efficient communication protocols. Additionally, it highlights the importance of balancing data collection efforts with the real-time processing capabilities of the agents to ensure optimal network performance.

The Quality of Service (QoS) agent uses a combination of historical network information and advanced neural network algorithms to predict and anticipate network congestion on a user’s network path. By analyzing throughput data for different links, the QoS agent can accurately anticipate potential bottlenecks and take proactive measures to mitigate them. This approach ensures that the intelligent network-based Multi-Agent System (MAS) can operate at optimal performance levels, providing a seamless and reliable experience for users. Additionally, the integration of NN algorithms within link metrics allows for more accurate and dynamic prediction of network congestion, further improving the overall performance of the MAS. By proactively identifying the potential for congestion, alternative routes can be swiftly assessed and recalculated to ensure the most efficient path for the user.

A thorough comparison of various models for predicting network throughput has been conducted to accurately determine the optimal option. These models serve as a benchmark for evaluating the performance of Multi-Agent Systems (MAS) in intelligent network systems, enabling the measurement of key metrics such as the latency of the Quality of Service (QoS) agent and the communication delay between agents.

The Mean Absolute Errors (MAE) are clearly demonstrated, showcasing the accuracy of the model. Furthermore, the impressive capability of the aggregate link throughput (via LSTM) to be accurately predicted within random intervals of one hour. In this scenario, links symbolize various network associations between two hosts within the network, as inferred from the previously gathered network data. These connections may include router-router, router-switch, and switch-computer connections. Overall, it is evident that each model architecture in the MAS-based intelligent network scenario performs significantly better on the same data set than its predecessor, highlighting the effectiveness of the MAS-based intelligent network approach.

VI. CONCLUSION AND FUTURE WORK

The field of research surrounding agent-based systems and intelligent agents is a crucial area of study, as the utilization of multi-agent intelligent systems is incredibly valuable for an array of applications. Despite the potential benefits, there has been a lack of a comprehensive framework that effectively integrates the two essential streams of intelligent multi-agent systems in the real world and learning systems. To address this gap, we have developed a cutting-edge framework that divides the system into modular agents, each of which can be replaced at any time without disrupting the operation of the entire system. The beauty of this framework is that it is highly scalable, allowing us to add an unlimited number of agents to meet the demands of high availability, advanced functionality, and maintenance in a highly flexible manner. Our framework allows for the conversion of traditional networking management prototypes and outdated systems into intelligent networking-based multi-agent systems, providing a valuable opportunity to explore the relationship between their components and the interactions between them. The framework was discussed in the context of neural networks as a method for network traffic classification, prediction, and quality of service (QoS) monitoring, all integrated within the PADE virtual environment. As we continue to work towards the future, we plan to further enhance our proposed multi-agent-based network simulation environment by introducing novel intelligent agents, diverse network models, and evaluation metrics, and applying them in real-world physical and distributed environments.